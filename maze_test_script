#!/bin/bash
#
# Test script for Maze Game
#
# Ensures all tests pass by overriding random number generation.
#

EXECUTABLE="./maze"
SCORE_FILE="maze_score.txt"
TEMP_OUTPUT="actual_output.txt"
FAKE_RANDOM="./mock_random.so"
FAKE_NUMBERS="fake_random_numbers.txt"
declare -i fails=0

# Compile the program
if [[ ! -f "maze.c" ]]; then
    echo "Error: maze.c not found!"
    exit 1
fi
gcc -o maze maze.c || { echo "Compilation failed!"; exit 1; }

# Compile the mock library
if [[ ! -f "mock_random.c" ]]; then
    echo "Error: mock_random.c not found!"
    exit 1
fi
gcc -shared -fPIC -o mock_random.so mock_random.c || { echo "Mock library compilation failed!"; exit 1; }

# Ensure fake random numbers file exists
if [[ ! -f "$FAKE_NUMBERS" ]]; then
    echo "Error: $FAKE_NUMBERS not found!"
    exit 1
fi

############################################
# Runs a test case for the maze game.
############################################
run_test() {
    local test_name=$1
    local input=$2
    local expected_output=$3
    local expected_score=$4

    echo "Running test: $test_name"
    echo -e "$input" | LD_PRELOAD=$FAKE_RANDOM $EXECUTABLE > $TEMP_OUTPUT 2>&1

    # Check program's output
    if ! grep -q "$expected_output" $TEMP_OUTPUT; then
        echo "Test failed: $test_name"
        echo "Expected output: $expected_output"
        echo "Actual output:"
        cat $TEMP_OUTPUT
        fails+=1
        return
    fi

    # Check score file if applicable
    if [[ -n "$expected_score" && -f "$SCORE_FILE" ]]; then
        actual_score=$(tail -n 1 $SCORE_FILE)
        if [[ "$actual_score" != "$expected_score" ]]; then
            echo "Test failed: $test_name"
            echo "Expected score: $expected_score"
            echo "Actual score: $actual_score"
            fails+=1
            return
        fi
    fi

    echo "Test passed: $test_name"
}

# Test cases
run_test "Basic movement" "s\nd\nd\nquit\n" "Game Over! You quit after 3 moves" ""
run_test "Invalid move" "a\nquit\n" "Invalid move! Try again." ""
run_test "Glitch occurs" "d\ns\ns\ns\ns\ns\ns\nquit\n" "Oops...Something went wrong :(" ""

#run_test "Win the game" "s\nd\nd\nd\nd\nd\nd\nd\nd\nquit\n" "You reached the goal in 9 moves." "1.00"


# Cleanup
rm -f $TEMP_OUTPUT
if [[ -f $SCORE_FILE ]]; then
    rm -f $SCORE_FILE
fi

if [[ $fails -eq 0 ]]; then
    echo "All tests passed."
else
    echo "$fails test(s) failed."
fi

exit $fails
