        -:    0:Source:test_memoryMatch.c
        -:    0:Graph:match-test_memoryMatch.gcno
        -:    0:Data:match-test_memoryMatch.gcda
        -:    0:Runs:3
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <time.h>
        -:    5:#include <stdbool.h>
        -:    6:
        -:    7:
        -:    8:#define SIZE 4
        -:    9:#define MAX_TRIES 10
        -:   10:
        -:   11:typedef struct {
        -:   12:    const char *object;
        -:   13:    const char *trait;
        -:   14:} objectTrait;
        -:   15:
        4:   16:void makeBoard(char *board[SIZE][SIZE], char *traitsBoard[SIZE][SIZE]) {
        4:   17:    const objectTrait hardcodedPairs[SIZE * SIZE / 2] = {
        -:   18:        {"Crown", "Royalty"}, {"Scepter", "Royalty"},
        -:   19:        {"Fur Coat", "Elegance"}, {"Necklace", "Elegance"},
        -:   20:        {"Tentacles", "Power"}, {"Staff", "Power"},
        -:   21:        {"Mirror", "Glamour"}, {"Heels", "Glamour"}
        -:   22:    };
        -:   23:
        4:   24:    int index = 0;
       20:   25:    for (int r = 0; r < SIZE; r++) {
       80:   26:        for (int c = 0; c < SIZE; c++) {
       64:   27:            board[r][c] = (char *)hardcodedPairs[index / 2].object;
       64:   28:            traitsBoard[r][c] = (char *)hardcodedPairs[index / 2].trait;
       64:   29:            index++;
        -:   30:        }
        -:   31:    }
        4:   32:}
        -:   33:
       22:   34:void showBoard(char *board[SIZE][SIZE], int shown[SIZE][SIZE]) {
       22:   35:    printf("   ");
      110:   36:    for (int i = 0; i < SIZE; i++) {
       88:   37:        printf("%2d        ", i); // Column header
        -:   38:    }
       22:   39:    printf("\n");
        -:   40:
      110:   41:    for (int i = 0; i < SIZE; i++) {
       88:   42:        printf("%2d ", i); // Row header
      440:   43:        for (int j = 0; j < SIZE; j++) {
      352:   44:            if (shown[i][j]) {
     142*:   45:                printf("%-10s ", board[i][j] ? board[i][j] : "[??]");
        -:   46:            } else {
      210:   47:                printf("[?]       ");
        -:   48:            }
        -:   49:        }
       88:   50:        printf("\n");
        -:   51:    }
       22:   52:}
        -:   53:
       18:   54:int isMatch(const char *trait1, const char *trait2) {
       18:   55:    return strcmp(trait1, trait2) == 0;
        -:   56:}
        -:   57:
        3:   58:int main() {
        -:   59:
        5:   60:    for (int game = 0; game < 2; game++) {  // Run the game 2 times
        4:   61:        printf("Welcome to Disney Villain Memory Match!\n\n");
        -:   62:
        4:   63:        char *board[SIZE][SIZE] = {NULL};
        4:   64:        char *traitsBoard[SIZE][SIZE] = {NULL};
        4:   65:        int shown[SIZE][SIZE] = {0};
        -:   66:
        4:   67:        FILE *memoryMatch_score = fopen("memoryMatch_score.txt", "w");
        -:   68:
        4:   69:        printf("\nGame %d\n", game + 1);
        -:   70:        
        4:   71:        makeBoard(board, traitsBoard);
        4:   72:        showBoard(board, shown);
        -:   73:
        4:   74:        float points = 0.0;
        4:   75:        int tries = 0;
        4:   76:        int matches = 0;
        4:   77:        bool quit = false;
        -:   78:
       22:   79:        while (matches < SIZE * SIZE / 2) {
       21:   80:            if (tries >= MAX_TRIES) {
        1:   81:                printf("\nYou've reached the maximum number of tries (%d). Game over!\n", MAX_TRIES);
        1:   82:                printf("Your final score: %.2f\n", points);
        1:   83:                fprintf(memoryMatch_score, "%.2f\n", points / tries);
        1:   84:                break;
        -:   85:            }
        -:   86:
        -:   87:            int r1, c1, r2, c2;
        -:   88:
       20:   89:            printf("\nEnter '-1 -1' at any time to quit the game.\n");
        -:   90:
        -:   91:            while (1) {
       26:   92:                printf("Enter the coordinates of the first object(row col): ");
       26:   93:                if (scanf("%d %d", &r1, &c1) == 2) {
       25:   94:                    if (r1 == -1 && c1 == -1) {
        1:   95:                        quit = true;
        1:   96:                        break;
        -:   97:                    }
       24:   98:                    if (r1 >= 0 && r1 < SIZE && c1 >= 0 && c1 < SIZE &&
       24:   99:                    !shown[r1][c1]) {
       19:  100:                        break;
        -:  101:                    }
        -:  102:                }
        6:  103:                if (quit == false ) {
        6:  104:                    printf("Invalid input. Try again.\n");
        -:  105:                }                
        8:  106:                while (getchar() != '\n'); 
        -:  107:            }
        -:  108:
       20:  109:            if (quit == true) {
        1:  110:                printf("You chose to quit. Your score is 0.00\n");
        1:  111:                fprintf(memoryMatch_score, "0.00\n");
        1:  112:                fclose(memoryMatch_score);
        2:  113:                return 0;
        -:  114:            }
        -:  115:
        -:  116:            while (1) {
       22:  117:                printf("Enter the coordinates of the second object(row col): ");
       22:  118:                if (scanf("%d %d", &r2, &c2) == 2) {
       22:  119:                    if (r2 == -1 && c2 == -1) {
        1:  120:                        quit = true;
        1:  121:                        break;
        -:  122:                    }
       21:  123:                    if (r2 >= 0 && r2 < SIZE && c2 >= 0 && c2 < SIZE &&
       21:  124:                    !shown[r2][c2] && !(r1 == r2 && c1 == c2)) {
        -:  125:                        break;
        -:  126:                    }
        -:  127:                }
        3:  128:                if (quit == false ) {
        3:  129:                    printf("Invalid input. Try again.\n");
        -:  130:                }
        -:  131:            
        3:  132:                while (getchar() != '\n'); 
        -:  133:            }
       19:  134:            if (quit == true) {
        1:  135:                printf("You chose to quit. Your score is 0.00\n");
        1:  136:                fprintf(memoryMatch_score, "0.00\n");
        1:  137:                fclose(memoryMatch_score);
        1:  138:                return 0;
        -:  139:            }
        -:  140:
       18:  141:            shown[r1][c1] = 1;
       18:  142:            shown[r2][c2] = 1;
       18:  143:            showBoard(board, shown);
        -:  144:
       18:  145:            if (isMatch(traitsBoard[r1][c1], traitsBoard[r2][c2])) {
       15:  146:                printf("Matched objects: %s and %s\n", board[r1][c1], board[r2][c2]);
       15:  147:                printf("Trait: %s\n", traitsBoard[r1][c1]);
       15:  148:                points += 1.0;
       15:  149:                matches++;
        -:  150:            } else {
        3:  151:                printf("No match. Try again.\n");
        3:  152:                shown[r1][c1] = 0;
        3:  153:                shown[r2][c2] = 0;
        3:  154:                points -= 0.25;
        3:  155:                if (points < 0.0) {
        2:  156:                    points = 0.0;
        -:  157:                }
        -:  158:            }
        -:  159:
       18:  160:            tries++;
       18:  161:            printf("Current points: %.2f\n", points);
       18:  162:            printf("Efficiency: %.2f points/turn\n", points / tries);
       18:  163:            printf("Remaining tries: %d\n", MAX_TRIES - tries);
        -:  164:        }
        -:  165:
        2:  166:        if (matches == (SIZE * SIZE / 2) && tries <= MAX_TRIES) {
        1:  167:            printf("\nCongratulations! You matched all objects in %d tries.\n", tries);
        1:  168:            printf("Your final points is %.2f.\n", points);
        -:  169:        }
        -:  170:
        2:  171:        printf(" %.2f \n", points / tries);
        2:  172:        fprintf(memoryMatch_score, "%.2f\n", points / tries);
        -:  173:
        2:  174:        fclose(memoryMatch_score);
        -:  175:    }
        -:  176:
        -:  177:    
        1:  178:    return 0;
        -:  179:}
